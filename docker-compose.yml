websources:
  build: ./images/sources
  volumes:
    - ./site:/usr/src/app

neosources:
  build: ./images/sources
  volumes:
    - ./neo:/usr/src/app

node.sources:
  build: ./images/sources
  volumes:
    - ./neo:/usr/src/app

# base image for koa api services
koa.api.base:
  image: busybox
  volumes:
    - ./logs:/logs
    - ./.cache/npm:/root/.npm
    - ./node.libs/pd.logger:/usr/local/lib/node_modules/pd.logger
    - ./node.libs/pd.koa.api:/usr/local/lib/node_modules/pd.koa.api

# base image for postgres storage
postgres.storage:
  image: busybox
  volumes:
    - /var/lib/postgresql/data

# base image for neo4j storage
neo4j.storage:
  image: busybox
  volumes:
    - /data

# database-related microservices
svc.person:
  build: ./images/koa.api
  volumes:
    - ./svc.person:/usr/src/app
  volumes_from:
    - koa.api.base
  env_file:
    - docker.env
  command: nodemon --legacy-watch app.js
  ports:
    - "4000:80"
  links:
    - postgres:postgres
    - neo4j:neo4j

svc.user:
  build: ./images/koa.api
  volumes:
    - ./svc.user:/usr/src/app
  volumes_from:
    - koa.api.base
  env_file:
    - docker.env
  command: nodemon --legacy-watch app.js
  ports:
    - "4002:80"
  links:
    - postgres:postgres

svc.pedigree-relation:
  build: ./images/koa.api
  volumes:
    - ./svc.pedigree-relation:/usr/src/app
  volumes_from:
    - koa.api.base
  env_file:
    - docker.env
  command: nodemon --legacy-watch app.js
  ports:
    - "4003:80"
  links:
    - neo4j:neo4j

svc.marriage-relation:
  build: ./images/koa.api
  volumes:
    - ./svc.marriage-relation:/usr/src/app
  volumes_from:
    - koa.api.base
  env_file:
    - docker.env
  command: nodemon --legacy-watch app.js
  ports:
    - "4004:80"
  links:
    - neo4j:neo4j

svc.minor-content:
  build: ./images/koa.api
  volumes:
    - ./svc.minor-content:/usr/src/app
  volumes_from:
    - koa.api.base
  env_file:
    - docker.env
  command: nodemon --legacy-watch app.js
  ports:
    - "4006:80"
  links:
    - postgres:postgres

# logging-related containers
# svc.fluentd:
#   build: ./images/fluentd
#   volumes:
#     - ./logs:/var/log
#   links:
#     - svc.elasticsearch:svc.elasticsearch

# svc.elasticsearch:
#   build: ./images/elasticsearch

# svc.kibana:
#   build: ./images/kibana
#   links:
#     - svc.elasticsearch:elasticsearch
#   ports:
#     - 5601:5601

#####
server:
  build: ./images/server
  command: sh -c 'while true; do sleep 10000; done'
  volumes:
    - ./.cache/m2:/root/.m2
    - .:/usr/src/root
  volumes_from:
    - websources
  env_file:
    - docker.env
  ports:
    - "3000:3000"
    - "7888:7888"
  links:
    - postgres:postgres
    - neonode:neonode
    - svc.user:svc.user
    - svc.minor-content:svc.minor-content

postgres:
  build: ./images/postgres
  env_file:
    - docker.env
  ports:
    - "5432:5432"
  volumes_from:
    - postgres.storage

schemup:
  build: ./images/schemup
  links:
    - postgres
  volumes:
    - ./schema:/schema
  working_dir: /schema
  env_file:
    - docker.env

neo4j:
  build: ./images/neo4j
  ports:
    - "7474:7474"
  env_file:
    - docker.env
  environment:
    NEO4J_AUTH: none
  volumes_from:
    - neo4j.storage

frontend:
  build: ./images/frontend
  command: sh -c 'while true; do sleep 10000; done'
  volumes:
    - ./.cache/npm:/root/.npm
  volumes_from:
    - websources
  env_file:
    - docker.env

neonode:
  build: ./images/neonode
  command: nodemon --legacy-watch app.js
  volumes:
    - ./.cache/npm:/root/.npm
  volumes_from:
    - neosources
  env_file:
    - docker.env
  ports:
    - "3001:3000"
  links:
    - neo4j:neo4j
